---
layout: base.njk
title: Search
---

<div class="max-w-3xl mx-auto px-4 py-8">
  <h1 class="text-4xl font-bold mb-8 text-white">Search</h1>
  
  <div class="mb-8">
    <div class="flex flex-wrap gap-2 mb-4">
      <input 
        type="text" 
        id="search-input" 
        placeholder="Search posts..." 
        class="flex-grow px-4 py-2 rounded bg-gray-800 text-white border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
    </div>
    
    <div class="mb-4">
      <h3 class="text-lg font-medium text-white mb-2">Filter by tags:</h3>
      <div id="tag-filters" class="flex flex-wrap gap-2">
        <!-- Tags will be inserted here by JavaScript -->
      </div>
    </div>
  </div>
  
  <div id="search-results" class="space-y-8">
    <!-- Results will be inserted here -->
    <p id="no-results" class="text-gray-400">Loading search index...</p>
  </div>
</div>

<!-- Search functionality -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const resultsContainer = document.getElementById('search-results');
    const noResults = document.getElementById('no-results');
    const tagFiltersContainer = document.getElementById('tag-filters');
    let searchData = [];
    let searchDebounceTimer = null;
    
    // Function to get URL parameters
    function getUrlParameter(name) {
      name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
      const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
      const results = regex.exec(location.search);
      return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    }
    
    // Check if we have a tag parameter in URL
    const urlTag = getUrlParameter('tag');
    
    // Fetch the search index asynchronously
    fetch('./searchIndex.json')
      .then(response => {
        if (!response.ok) {
          // Try with the alternative path for GitHub Pages
          return fetch('/Tree13/searchIndex.json');
        }
        return response;
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to load search index');
        }
        return response.json();
      })
      .then(data => {
        searchData = data;
        
        // Extract all unique tags
        const allTags = [...new Set(searchData.flatMap(post => post.tags))];
        
        // Create tag filter buttons
        allTags.forEach(tag => {
          const tagBtn = document.createElement('button');
          tagBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
            </svg>
            ${tag}
          `;
          tagBtn.className = 'px-3 py-1 rounded bg-gray-800 text-gray-300 hover:bg-gray-700 transition inline-flex items-center text-xs';
          tagBtn.dataset.tag = tag;
          
          // If this tag matches the URL parameter, activate it
          if (urlTag && urlTag.toLowerCase() === tag.toLowerCase()) {
            tagBtn.classList.add('bg-blue-600');
            tagBtn.classList.remove('bg-gray-800');
          }
          
          tagBtn.addEventListener('click', () => {
            tagBtn.classList.toggle('bg-blue-600');
            tagBtn.classList.toggle('bg-gray-800');
            performSearch();
            
            // Update URL without reloading page
            const selectedTags = Array.from(tagFiltersContainer.querySelectorAll('.bg-blue-600'))
              .map(btn => btn.dataset.tag);
            
            if (selectedTags.length === 1) {
              history.replaceState(null, '', `?tag=${selectedTags[0]}`);
            } else if (selectedTags.length === 0) {
              history.replaceState(null, '', window.location.pathname);
            }
          });
          
          tagFiltersContainer.appendChild(tagBtn);
        });
        
        // Set up search input debounce
        searchInput.addEventListener('input', () => {
          clearTimeout(searchDebounceTimer);
          searchDebounceTimer = setTimeout(performSearch, 300); // 300ms debounce
        });
        
        // Initial search
        performSearch();
      })
      .catch(error => {
        console.error('Error loading search index:', error);
        noResults.textContent = 'Failed to load search index. Please try refreshing the page.';
      });
    
    function performSearch() {
      const query = searchInput.value.toLowerCase();
      
      // Get selected tags
      const selectedTags = Array.from(tagFiltersContainer.querySelectorAll('.bg-blue-600'))
        .map(btn => btn.dataset.tag);
      
      // Filter posts based on query and selected tags
      const filteredPosts = searchData.filter(post => {
        const matchesQuery = query === '' || 
          post.title.toLowerCase().includes(query) || 
          post.content.toLowerCase().includes(query);
          
        const matchesTags = selectedTags.length === 0 || 
          selectedTags.every(tag => post.tags.includes(tag));
          
        return matchesQuery && matchesTags;
      });
      
      // Clear previous results
      while (resultsContainer.firstChild) {
        if (resultsContainer.firstChild !== noResults) {
          resultsContainer.removeChild(resultsContainer.firstChild);
        }
      }
      
      // Display results or no results message
      if (filteredPosts.length > 0) {
        noResults.style.display = 'none';
        
        filteredPosts.forEach(post => {
          const postEl = document.createElement('article');
          postEl.className = 'border-b border-gray-800 pb-6';
          
          const title = document.createElement('h2');
          title.className = 'text-2xl font-bold mb-2 text-white';
          
          const link = document.createElement('a');
          link.href = post.url;
          link.textContent = post.title;
          link.className = 'hover:text-blue-400 transition';
          title.appendChild(link);
          
          const date = document.createElement('p');
          date.className = 'text-gray-400 text-sm mb-2';
          date.textContent = new Date(post.date).toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          });
          
          const tagsContainer = document.createElement('div');
          tagsContainer.className = 'flex flex-wrap gap-2 mb-3';
          
          post.tags.forEach(tag => {
            const tagSpan = document.createElement('span');
            tagSpan.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
              </svg>
              ${tag}
            `;
            tagSpan.className = 'px-2 py-1 text-xs rounded bg-gray-800 text-gray-300 inline-flex items-center';
            tagsContainer.appendChild(tagSpan);
          });
          
          const excerpt = document.createElement('p');
          excerpt.className = 'text-gray-300';
          excerpt.textContent = post.excerpt || post.content.substring(0, 150) + '...';
          
          postEl.appendChild(title);
          postEl.appendChild(date);
          postEl.appendChild(tagsContainer);
          postEl.appendChild(excerpt);
          
          resultsContainer.insertBefore(postEl, noResults);
        });
      } else {
        noResults.style.display = 'block';
        noResults.textContent = query === '' && selectedTags.length === 0 
          ? 'No posts available.' 
          : 'No posts found matching your search criteria.';
      }
    }
  });
</script> 